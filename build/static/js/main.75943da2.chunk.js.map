{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","hotelResults","searchStr","handleSearch","bind","assertThisInitialized","handleSubmit","event","setState","target","value","length","i","Hotels","j","facilities","toLowerCase","indexOf","includes","name","push","preventDefault","_this2","react_default","a","createElement","style","textAlign","onSubmit","type","onChange","display","width","position","marginLeft","backgroundColor","map","item","uniqueID","key","id","subitem","index","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"mRA4EeA,cAvEb,SAAAA,IAAc,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAJ,IACZC,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAF,GAAAO,KAAAH,QACKI,MAAQ,CACXC,aAAe,GACfC,UAAY,QAIdT,EAAKU,aAAeV,EAAKU,aAAaC,KAAlBV,OAAAW,EAAA,EAAAX,QAAAW,EAAA,EAAAX,CAAAD,KACpBA,EAAKa,aAAeb,EAAKa,aAAaF,KAAlBV,OAAAW,EAAA,EAAAX,QAAAW,EAAA,EAAAX,CAAAD,KATRA,4EAYDc,GAOX,GALAX,KAAKY,SAAS,CAAEN,UAAWK,EAAME,OAAOC,QACxCd,KAAKI,MAAMC,aAAe,GAItBL,KAAKI,MAAME,UAAUS,OAAS,EAChC,IAAI,IAAIC,EAAE,EAAGA,EAAIC,EAAOF,OAAQC,IAC9B,IAAI,IAAIE,EAAE,EAAGA,EAAGD,EAAOD,GAAGG,WAAWJ,OAAQG,KACgD,IAAvFD,EAAOD,GAAGG,WAAWD,GAAGE,cAAcC,QAAQrB,KAAKI,MAAME,UAAUc,iBAEhEpB,KAAKI,MAAMC,aAAaiB,SAASL,EAAOD,GAAGO,OAC9CvB,KAAKI,MAAMC,aAAamB,KAAKP,EAAOD,GAAGO,4CAQtCZ,GACXA,EAAMc,kDAGC,IAAAC,EAAA1B,KACP,OACE2B,EAAAC,EAAAC,cAAA,OAAKC,MAAO,CAAEC,UAAW,WAEvBJ,EAAAC,EAAAC,cAAA,QAAMG,SAAUhC,KAAKU,cAArB,UAEEiB,EAAAC,EAAAC,cAAA,SAAOI,KAAK,OAAOnB,MAAOd,KAAKI,MAAME,UAAW4B,SAAUlC,KAAKO,gBAGjEoB,EAAAC,EAAAC,cAAA,OAAKC,MAAO,CAAEK,QAAS,eAAgBC,MAAO,IAAKC,SAAU,WAAYC,YAAa,IAAKC,gBAAiB,WAIxGtB,EAAOuB,IAAK,SAACC,EAAMC,GACnB,IAAI,IAAI1B,EAAE,EAAGA,EAAIU,EAAKtB,MAAMC,aAAaU,OAAQC,IAC/C,GAAGU,EAAKtB,MAAMC,aAAaW,KAAOyB,EAAKlB,KACrC,OACEI,EAAAC,EAAAC,cAAA,UAAIF,EAAAC,EAAAC,cAAA,MAAIc,IAAKF,EAAKG,GAAId,MAAO,CAAEC,UAAW,WAAYJ,EAAAC,EAAAC,cAAA,SAAIY,EAAKlB,MAASI,EAAAC,EAAAC,cAAA,UAEtEY,EAAKtB,WAAWqB,IAAK,SAACK,EAASC,GAAV,OAAqBnB,EAAAC,EAAAC,cAAA,MAAIc,IAAKG,GAAQD,mBAzD7DE,aCQEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO3B,EAAAC,EAAAC,cAAC0B,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.75943da2.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport './App.css';\nimport Hotels from './data/hotels.json';\n\nclass App extends Component {\n  constructor() {\n    super();\n    this.state = {\n      hotelResults : [],\n      searchStr : 'pool',\n    };\n\n\n    this.handleSearch = this.handleSearch.bind(this);\n    this.handleSubmit = this.handleSubmit.bind(this);\n  }\n\n  handleSearch(event) {\n\n    this.setState({ searchStr: event.target.value });\n    this.state.hotelResults = [];\n\t//this.setState({ hotelResults: [] });\n\n    //add locations to search results\n    if( this.state.searchStr.length > 1){\n      for(let i=0; i < Hotels.length; i++){\n        for(let j=0; j< Hotels[i].facilities.length; j++){\n          if( Hotels[i].facilities[j].toLowerCase().indexOf(this.state.searchStr.toLowerCase()) !== -1){   \n            //check if room is already in the result\n            if( !this.state.hotelResults.includes(Hotels[i].name))\n              this.state.hotelResults.push(Hotels[i].name);\n          }\n        }\n      }\n    }\n\n  }\n\n  handleSubmit(event) {\n    event.preventDefault();\n  }\n  \n  render() {\n    return (\n      <div style={{ textAlign: \"center\" }}>\n        \n        <form onSubmit={this.handleSubmit}>\n          Search:\n          <input type=\"text\" value={this.state.searchStr} onChange={this.handleSearch} />\n        </form>\n\n        <div style={{ display: \"inline-block\", width: 200, position: \"absolute\", marginLeft: -100, backgroundColor: \"yellow\"}}>\n        {\n          //based upon search result locations display the facilities at the hotel\n\t\t\n            Hotels.map( (item, uniqueID) => {        \n            for(let i=0; i < this.state.hotelResults.length; i++){\n              if(this.state.hotelResults[i] === item.name ){\n                return(\n                  <ul><li key={item.id} style={{ textAlign: \"center\" }}><b>{item.name}</b><ul>\n                  {\n                    item.facilities.map( (subitem, index ) => <li key={index}>{subitem}</li> ) \n                  }\n                  </ul></li></ul>\n                );  \n              }\t\t  \n            }\n\t\t })\n        }\n        </div>\n\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}